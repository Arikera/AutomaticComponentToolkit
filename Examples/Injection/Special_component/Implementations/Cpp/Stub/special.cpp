/*++

Copyright (C) 2019 Special Numbers developers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of Special Numbers library. It needs to be generated only once.

Interface version: 1.0.0

*/

#include "special_abi.hpp"
#include "special_interfaces.hpp"
#include "special_interfaceexception.hpp"

#include "special_specialvariable.hpp"

using namespace Special;
using namespace Special::Impl;

// Injected Components
Numbers::PWrapper CWrapper::sPNumbersWrapper;


Special_FunctionTableBase IBase::m_sFunctionTable;
Special_FunctionTableSpecialVariable ISpecialVariable::m_sFunctionTable;

void CWrapper::GetVersion(Special_uint32 & nMajor, Special_uint32 & nMinor, Special_uint32 & nMicro)
{
	nMajor = SPECIAL_VERSION_MAJOR;
	nMinor = SPECIAL_VERSION_MINOR;
	nMicro = SPECIAL_VERSION_MICRO;
}

bool CWrapper::GetLastError(IBase* pInstance, std::string & sErrorMessage)
{
	throw ESpecialInterfaceException(SPECIAL_ERROR_NOTIMPLEMENTED);
}

void CWrapper::ReleaseInstance(IBase* pInstance)
{
	IBase::ReleaseBaseClassInterface(pInstance);
}

void CWrapper::AcquireInstance(IBase* pInstance)
{
	IBase::AcquireBaseClassInterface(pInstance);
}

ISpecialVariable * CWrapper::CreateSpecialVariable(const Special_double dInitialValue)
{
	ISpecialVariable::m_sFunctionTable.m_pfnAcquireOwnership = &special_acquireinstance;
	ISpecialVariable::m_sFunctionTable.m_pfnReleaseOwnership = &special_releaseinstance;
	ISpecialVariable::m_sFunctionTable.m_pfnGetLastError = &special_getlasterror;
	ISpecialVariable::m_sFunctionTable.m_pfnSetValue = &numbers_specialvariable_setvalue;
	ISpecialVariable::m_sFunctionTable.m_pfnGetValue = &numbers_specialvariable_getvalue;
	ISpecialVariable::m_sFunctionTable.m_pfnGetSpecialValue = &special_specialvariable_getspecialvalue;

	std::unique_ptr<CSpecialVariable> pSpecialVariable(new CSpecialVariable());
	pSpecialVariable->SetValue(dInitialValue);
	return pSpecialVariable.release();
}


