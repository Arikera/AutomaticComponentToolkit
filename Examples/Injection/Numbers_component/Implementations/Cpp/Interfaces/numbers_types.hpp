/*++

Copyright (C) 2019 Numbers developers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of Numbers library

Interface version: 1.0.0

*/

#ifndef __NUMBERS_TYPES_HEADER_CPP
#define __NUMBERS_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef NUMBERS_USELEGACYINTEGERTYPES

typedef unsigned char Numbers_uint8;
typedef unsigned short Numbers_uint16 ;
typedef unsigned int Numbers_uint32;
typedef unsigned long long Numbers_uint64;
typedef char Numbers_int8;
typedef short Numbers_int16;
typedef int Numbers_int32;
typedef long long Numbers_int64;

#else // NUMBERS_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t Numbers_uint8;
typedef uint16_t Numbers_uint16;
typedef uint32_t Numbers_uint32;
typedef uint64_t Numbers_uint64;
typedef int8_t Numbers_int8;
typedef int16_t Numbers_int16;
typedef int32_t Numbers_int32;
typedef int64_t Numbers_int64 ;

#endif // NUMBERS_USELEGACYINTEGERTYPES

typedef float Numbers_single;
typedef double Numbers_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef Numbers_int32 NumbersResult;
typedef void * NumbersHandle;
typedef void * Numbers_pvoid;

typedef struct {
	// TODO: minimal type safety:
	// Add some form of Identifier which class in which component this Table belongs to
	// e.g. Path to concrete class via: schema/version/ClassName//schema/version/ClassName// ...
	void* m_pfnReleaseOwnership;
	void* m_pfnAcquireOwnership;
	void* m_pfnGetLastError;

	// additional functions
} Numbers_FunctionTableBase;

typedef struct Numbers_FunctionTableVariable: public Numbers_FunctionTableBase {
	// base class 
	// additional functions
	void* m_pfnSetValue;
	void* m_pfnGetValue;
} Numbers_FunctionTableVariable;

// Unused:
//typedef struct {
//	NumbersHandle m_hHandle;
//	Numbers_FunctionTableBase* m_pFunctionTable;
//} NumbersExtendedHandleBase;
//
//typedef struct {
//	NumbersHandle m_hHandle;
//	Numbers_FunctionTableVariable* m_pFunctionTable;
//} NumbersExtendedHandleVariable;

typedef struct {
	NumbersHandle m_hHandle;
	Numbers_FunctionTableBase* m_pFunctionTable;
} NumbersExtendedHandle;

// Component generates and owns instances of NumbersExtendedHandleBase, FunctionTableVariable,
// ... with livetime longer than each instances livetime.

/*************************************************************************************************************************
 Version for Numbers
**************************************************************************************************************************/

#define NUMBERS_VERSION_MAJOR 1
#define NUMBERS_VERSION_MINOR 0
#define NUMBERS_VERSION_MICRO 0
#define NUMBERS_VERSION_PRERELEASEINFO ""
#define NUMBERS_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for Numbers
**************************************************************************************************************************/

#define NUMBERS_SUCCESS 0
#define NUMBERS_ERROR_NOTIMPLEMENTED 1
#define NUMBERS_ERROR_INVALIDPARAM 2
#define NUMBERS_ERROR_INVALIDCAST 3
#define NUMBERS_ERROR_BUFFERTOOSMALL 4
#define NUMBERS_ERROR_GENERICEXCEPTION 5
#define NUMBERS_ERROR_COULDNOTLOADLIBRARY 6
#define NUMBERS_ERROR_COULDNOTFINDLIBRARYEXPORT 7
#define NUMBERS_ERROR_INCOMPATIBLEBINARYVERSION 8

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef NumbersHandle Numbers_Base;
typedef NumbersHandle Numbers_Variable;

namespace Numbers {

} // namespace Numbers;

// define legacy C-names for enums, structs and function types

#endif // __NUMBERS_TYPES_HEADER_CPP
